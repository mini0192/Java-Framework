/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-08 07:24:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class write_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <title>게시글 작성</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    * {\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("      box-sizing: border-box;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    body {\r\n");
      out.write("      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("      background-color: #e2e2e2;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      justify-content: center;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      height: 100vh;\r\n");
      out.write("      margin: 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-container {\r\n");
      out.write("      background-color: #ffffff;\r\n");
      out.write("      border-radius: 12px;\r\n");
      out.write("      padding: 40px;\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      max-width: 600px;\r\n");
      out.write("      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h1 {\r\n");
      out.write("      font-size: 28px;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      color: #2c3e50;\r\n");
      out.write("      margin-bottom: 30px;\r\n");
      out.write("      text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    label {\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("      color: #2c3e50;\r\n");
      out.write("      margin-bottom: 8px;\r\n");
      out.write("      display: block;\r\n");
      out.write("      font-weight: 600;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"text\"], textarea {\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      padding: 12px;\r\n");
      out.write("      margin-top: 10px;\r\n");
      out.write("      border-radius: 6px;\r\n");
      out.write("      border: 1px solid #dcdfe1;\r\n");
      out.write("      background-color: #f8f9fa;\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("      color: #495057;\r\n");
      out.write("      transition: all 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"text\"]:focus, textarea:focus {\r\n");
      out.write("      border-color: #5c6bc0;\r\n");
      out.write("      background-color: #ffffff;\r\n");
      out.write("      outline: none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    textarea {\r\n");
      out.write("      resize: none;\r\n");
      out.write("      min-height: 120px;\r\n");
      out.write("      padding: 12px 15px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* 추가된 간격 */\r\n");
      out.write("    #title {\r\n");
      out.write("      margin-bottom: 20px; /* 제목과 작성자 사이 간격 */\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #writer {\r\n");
      out.write("      margin-bottom: 20px; /* 작성자와 내용 사이 간격 */\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button {\r\n");
      out.write("      background-color: #5c6bc0;\r\n");
      out.write("      color: #ffffff;\r\n");
      out.write("      padding: 14px;\r\n");
      out.write("      margin-top: 20px;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-radius: 6px;\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      transition: all 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    button:hover {\r\n");
      out.write("      background-color: #3f4a87;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-container p {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      color: #7f8c8d;\r\n");
      out.write("      margin-top: 15px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-container p a {\r\n");
      out.write("      color: #5c6bc0;\r\n");
      out.write("      text-decoration: none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-container p a:hover {\r\n");
      out.write("      text-decoration: underline;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"form-container\">\r\n");
      out.write("  <h1>게시글 작성</h1>\r\n");
      out.write("\r\n");
      out.write("  <form action=\"/app/board\" method=\"post\">\r\n");
      out.write("    <label for=\"title\">제목</label>\r\n");
      out.write("    <input type=\"text\" id=\"title\" name=\"title\" placeholder=\"제목을 입력하세요\" required />\r\n");
      out.write("\r\n");
      out.write("    <label for=\"writer\">작성자</label>\r\n");
      out.write("    <input type=\"text\" id=\"writer\" name=\"writer\" placeholder=\"작성자를 입력하세요\" required />\r\n");
      out.write("\r\n");
      out.write("    <label for=\"content\">내용</label>\r\n");
      out.write("    <textarea id=\"content\" name=\"content\" placeholder=\"내용을 입력하세요\" required></textarea>\r\n");
      out.write("\r\n");
      out.write("    <button type=\"submit\">제출</button>\r\n");
      out.write("  </form>\r\n");
      out.write("\r\n");
      out.write("  <p>게시글을 작성한 후, <strong>제출</strong> 버튼을 클릭하세요.</p>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
